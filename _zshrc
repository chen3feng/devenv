# Enable case-insensitive auto-complete
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# zinit configurations
autoload -Uz compinit
compinit

# This can be useful when pasting large amount of text in the terminal, to avoid triggering
# autosuggestion for strings that are too long.
# see https://github.com/zsh-users/zsh-autosuggestions#disabling-suggestion-for-large-buffers
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
ZSH_AUTOSUGGEST_USE_ASYNC=1

if command -v zinit &> /dev/null; then
    zinit for \
        light-mode  zsh-users/zsh-autosuggestions \
        light-mode  zdharma/fast-syntax-highlighting \
                    zdharma/history-search-multi-word

    zinit snippet OMZP::git
    zinit snippet OMZ::lib/completion.zsh
    zinit snippet OMZ::lib/history.zsh
    zinit snippet OMZ::lib/key-bindings.zsh
    zinit snippet OMZ::lib/theme-and-appearance.zsh
fi

_THIS_DIR=$(dirname ${(%):-%N})
source $_THIS_DIR/shellrc

# Ohyyzsh beceme too slow in large git repository,
# See https://github.com/ohmyzsh/ohmyzsh/issues/3009
if [[ $ZSH =~ .*\.oh-my-zsh ]]; then
    git config --global --add oh-my-zsh.hide-dirty 1
    git config --global --add oh-my-zsh.hide-status 1
fi

# zsh 5.8 disabled this option defaultly,
# see https://github.com/advisories/GHSA-735j-r9q6-48mw
setopt PROMPT_SUBST

# Adaptive command line prompt.
shorten_prompt() {
    if [[ $COLUMNS -lt 100 ]]; then
        echo '4~|.../%1~|%~'
    elif [[ $COLUMNS -lt 150 ]]; then
        echo '4~|.../%2~|%~'
    else
        echo '5~|%-2~/â€¦/%3~|%4~'
    fi
}

# Using shorter prompt in vscode terminal
export PS1=$'%($(shorten_prompt))\e[32m$(parse_git_branch)\e[m%# '

# HOME, END and DELETE key
bindkey  "\e[H"   beginning-of-line
bindkey  "\e[F"   end-of-line
bindkey  "\e[3~"  delete-char

bindkey "\e[A" history-search-backward
bindkey "\e[B" history-search-forward

# Shift-Left/Right to move work by word
bindkey "\e[1;2D" backward-word
bindkey "\e[1;2C" forward-word

# Ctrl-Left/Right, same as above, for XShell
bindkey "\e[1;5D" backward-word
bindkey "\e[1;5C" forward-word
